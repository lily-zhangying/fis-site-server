<!--
title: 插件扩展点列表
toc: <ul class="nav"><li><a href="#toc_0">单文件编译扩展</a><ul class="nav"><li><a href="#toc_1">parser(编译器插件)</a></li><li><a href="#toc_2">preprocessor(标准预处理器插件)</a></li><li><a href="#toc_3">postprocessor(标准后处理器插件)</a></li><li><a href="#toc_4">lint(校验器插件)</a></li><li><a href="#toc_5">test(自动测试插件)</a></li><li><a href="#toc_6">optimizer(代码优化器插件)</a></li></ul></li><li><a href="#toc_7">打包扩展</a><ul class="nav"><li><a href="#toc_8">prepackager(打包预处理器插件)</a></li><li><a href="#toc_9">packager(打包处理器插件)</a></li><li><a href="#toc_10">spriter(sprite处理器插件)</a></li><li><a href="#toc_11">postpackager(打包后处理器插件)</a></li></ul></li><li><a href="#toc_12">命令行扩展</a><ul class="nav"><li><a href="#toc_13">command(命令行插件)</a></li></ul></li></ul>
type: detail
-->

<blockquote>
<p>fis的编译过程可以分为两个阶段： <strong>单文件编译</strong> 和 <strong>打包</strong>。处理流程如下图</p>
</blockquote>

<p><img src="http://fis.baidu.com/static/docs/img/workflow_f30cb62.png" alt="编译流程"/></p>

<p>fis编译系统具有一个既简单又容易扩展的插件体系，它是fis编译系统生命力的源泉。在了解插件机制之前，你可能需要了解一下fis的 <a href="https://github.com/fis-dev/fis/wiki/%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86">运行原理</a>，使用插件的说明请阅读 <a href="https://github.com/fis-dev/fis/wiki/%E6%8F%92%E4%BB%B6%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6">插件调用机制</a></p>

<p>fis在不做任何定制的情况下即可满足前端开发的基本需求，于此同时，系统也具有极强的可扩展性，fis的两大编译流程一共提供了10项扩展点，再加上命令行扩展能力，fis系统一共具有 <strong>11项扩展点</strong>：</p>

<h2 id="toc_0">单文件编译扩展</h2>

<blockquote>
<p>fis的单文件编译过程有6项扩展点</p>
</blockquote>

<h3 id="toc_1">parser(编译器插件)</h3>

<ul>
<li>命名规则：fis-parser-xxx</li>
<li>功能职责：将文件编译成标准js、css或者html语言</li>
<li>使用示例：
<code>javascript
//fis-conf.js
fis.config.merge({
    modules : {
        parser : {
            //coffee后缀的文件使用fis-parser-coffee-script插件编译
            coffee : &#39;coffee-script&#39;,
            //less后缀的文件使用fis-parser-less插件编译
            //处理器支持数组，或者逗号分隔的字符串配置
            less : [&#39;less&#39;],
            //md后缀的文件使用fis-parser-marked插件编译
            md : &#39;marked&#39;
        }
    },
    roadmap : {
        ext : {
            //less后缀的文件将输出为css后缀
            //并且在parser之后的其他处理流程中被当做css文件处理
            less : &#39;css&#39;,
            //coffee后缀的文件将输出为js文件
            //并且在parser之后的其他处理流程中被当做js文件处理
            coffee : &#39;js&#39;,
            //md后缀的文件将输出为html文件
            //并且在parser之后的其他处理流程中被当做html文件处理
            md : &#39;html&#39;
        }
    }
});
</code></li>
<li>插件配置：
<code>javascript
//fis-conf.js
fis.config.merge({
    settings : {
        parser : {
            //此处的配置数据将在fis调度fis-parser-coffee-script插件时传递给插件的入口函数接收。
            &#39;coffee-script&#39; : {}
        }
    }
});
</code></li>
<li>示例插件：

<ul>
<li><a href="https://github.com/fouber/fis-parser-coffee-script">fis-parser-coffee-script</a>：把coffee-script编译成js</li>
<li><a href="https://github.com/fouber/fis-parser-bdtmpl">fis-parser-bdtmpl</a>：使用baiduTemplate将前端模板文件编译成js</li>
<li><a href="https://github.com/fouber/fis-parser-less">fis-parser-less</a>：将less文件编译成css</li>
<li><a href="https://github.com/fouber/fis-parser-marked">fis-parser-marked</a>：把markdown文件编译成html</li>
<li><a href="https://github.com/fouber/fis-parser-utc">fis-parser-utc</a>：把underscore前端模板编译成js</li>
</ul></li>
</ul>

<h3 id="toc_2">preprocessor(标准预处理器插件)</h3>

<ul>
<li>命名规则：fis-preprocessor-xxx</li>
<li>功能职责：在标准化处理之前进行预处理</li>
<li>使用示例：
<code>javascript
//fis-conf.js
fis.config.merge({
    modules : {
        preprocessor : {
            //css后缀文件会经过fis-preprocessor-image-set插件的预处理
            css : &#39;image-set&#39;
        }
    }
});
</code></li>
<li>插件配置：
<code>javascript
//fis-conf.js
fis.config.merge({
    settings : {
        preprocessor : {
            //此处的配置数据将在fis调度fis-preprocessor-image-set插件时传递给插件的入口函数接收。
            &#39;image-set&#39; : {}
        }
    }
});
</code></li>
<li>示例插件：

<ul>
<li><a href="https://github.com/fouber/fis-preprocessor-image-set">fis-preprocessor-image-set</a>：如果css中使用的背景图比如a.png，旁边有一个a_2x.png文件，则将图片的背景设置为-    webkit-image-set形式。此功能为retina屏适配项目开发。</li>
</ul></li>
</ul>

<h3 id="toc_3">postprocessor(标准后处理器插件)</h3>

<ul>
<li>命名规则：fis-postprocessor-xxx</li>
<li>功能职责：在fis对js、css和类html文件进行语言能力扩展之后调用的插件，该阶段可获取到文件的requires等信息。</li>
<li>示例插件：

<ul>
<li><a href="https://github.com/fis-dev/fis-postprocessor-jswrapper">fis-postprocessor- jswrapper</a>：用于对js文件进行amd定义包装。</li>
</ul></li>
</ul>

<h3 id="toc_4">lint(校验器插件)</h3>

<ul>
<li>命名规则：fis-lint-xxx</li>
<li>功能职责：用于对代码进行校验，执行fis release命令时添加 <strong>--lint</strong>参数会调用该类型插件。</li>
<li>示例插件： <em>暂无</em></li>
</ul>

<h3 id="toc_5">test(自动测试插件)</h3>

<ul>
<li>命名规则：fis-test-xxx</li>
<li>功能职责：用于对代码进行测试，执行fis release命令时添加 <strong>--test</strong>参数会调用该类型插件。</li>
<li>示例插件： <em>暂无</em></li>
</ul>

<h3 id="toc_6">optimizer(代码优化器插件)</h3>

<ul>
<li>命名规则：fis-optimizer-xxx</li>
<li>功能职责：代码优化插件，用于对代码进行压缩等优化，执行fis release命令时添加 <strong>--optimize</strong>参数会调用该类型插件。</li>
<li>示例插件： 

<ul>
<li><a href="https://github.com/fis-dev/fis-optimizer-uglify-js">fis-optimizer-uglify-js</a>：调用uglify-js对js文件进行压缩优化。</li>
<li><a href="https://github.com/fis-dev/fis-optimizer-clean-css">fis-optimizer-clean-css</a>：调用clean-css对css文件进行压缩优化。</li>
<li><a href="https://github.com/fis-dev/fis-optimizer-html-minifier">fis-optimizer-html-minifier</a>：调用html-minifier对html、htm文件进行压缩优化。</li>
</ul></li>
</ul>

<h2 id="toc_7">打包扩展</h2>

<blockquote>
<p>fis的打包流程有4项扩展点：</p>
</blockquote>

<h3 id="toc_8">prepackager(打包预处理器插件)</h3>

<ul>
<li>命名规则：fis-prepackager-xxx</li>
<li>功能职责：用于对要打包的文件进行预处理。</li>
<li>示例插件： <em>暂无</em></li>
</ul>

<h3 id="toc_9">packager(打包处理器插件)</h3>

<ul>
<li>命名规则：fis-packager-xxx</li>
<li>功能职责：用于对要打包的文件进行处理，fis内置的处理逻辑是收集依赖关系，生成map.json文件，执行fis release命令时添加 <strong>--pack</strong> 参数会调用该类型插件。</li>
<li>注意事项：fis内置的packager插件即是 <strong>收集、生成map.json的过程</strong>，除非你有非常好的打包策略，否则请不要随意扩展这个接口。</li>
<li>示例插件：

<ul>
<li><a href="https://github.com/fis-dev/fis-packager-map">fis-packager-map</a>：将打包资源输出给map表。</li>
</ul></li>
</ul>

<h3 id="toc_10">spriter(sprite处理器插件)</h3>

<ul>
<li>命名规则：fis-spriter-xxx</li>
<li>功能职责：用于要发布的文件进行css sprite处理。</li>
<li>示例插件： <em>暂无</em></li>
</ul>

<h3 id="toc_11">postpackager(打包后处理器插件)</h3>

<ul>
<li>命名规则：fis-postpackager-xxx</li>
<li>功能职责：用于要发布的文件进行打包后处理。</li>
<li>示例插件： <em>暂无</em></li>
</ul>

<h2 id="toc_12">命令行扩展</h2>

<blockquote>
<p>fis还提供了扩展命令行命令的方式，fis内置了3条命令：fis release，fis server，fis install。如果还嫌这些不够，用户可以自行扩展。</p>
</blockquote>

<h3 id="toc_13">command(命令行插件)</h3>

<ul>
<li>命名规则：fis-command-xxx</li>
<li>功能职责：对fis的命令行进行扩展。</li>
<li>示例插件：

<ul>
<li><a href="https://github.com/fis-dev/fis-command-release">fis-command-release</a>：fis release命令的提供者，处理编译过程，并提供文件监听、自动上传等功能</li>
<li><a href="https://github.com/fis-dev/fis-command-install">fis-command-install</a>：fis install命令的提供者，用于从fis仓库下载组件、配置、框架、素材等资源</li>
<li><a href="https://github.com/fis-dev/fis-command-server">fis-command-server</a>：fis server命令的提供者，用于开启一个本地php-cgi服务器，对项目进行预览、调试。</li>
</ul></li>
</ul>